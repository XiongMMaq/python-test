#!/usr/local/bin/python3

def changeme1(mylist):
    '可变'
    mylist.append([1,2,3,4])
    print("内部调用：",mylist)

mylist = [10,11,12]
changeme1(mylist)
print("外部调用：",mylist)


'''
请注意：上面特意用了引号标准的部分，对可变类型或者引用的操作修改的是传过来的对象的属性。

可以这么理解(例子有点随意)：我在画画，小明来了说他也要画，我让他和我一起画，他如果和我在同一个画板上画，那么我们两的画就会同时改变。 而如果他说不，我要另外用一块画板，然后重新拿了块画板画起来了，那么我们两的画自然就不一样了。

同理可更改类型 的属性进行操作，这只是对引用的内存块里面的值进行操作，引用并没变，自然所有引用它的对象的值都变了。而对不可更改的对象进行操作，因为它引用的内存块只是对应一个固定的值，不能进行修改，要重新复制实际上就是更新引用。

如果我们运行下面的例子，对可更改类型的引用进行修改，结果就不一样了。
''''

def changeme2(mylist):
    '不可变'
    mylist = [1,2,3,4]
    print("内部调用：",mylist)

mylist = [10,11,12]
changeme2(mylist)
print("外部调用：",mylist)